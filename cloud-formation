{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Wiz AWS scanner orchestrator deployment",
  "Parameters": {
    "ExternalId": {
      "Type": "String",
      "Description": "Enter External ID, this is a nonce that will be used by our service to assume the WizOrchestratorRole",
      "AllowedPattern": "\\S{8}-\\S{4}-\\S{4}-\\S{4}-\\S{12}"
    },
    "DataScanning": {
      "Type": "String",
      "Description": "Enable data scanning",
      "AllowedValues": [
        "Enabled",
        "Disabled"
      ],
      "Default": "Disabled"
    },
    "NetworkConfiguration": {
      "Type": "String",
      "Description": "Using auto/manual network",
      "AllowedValues": [
        "Auto",
        "Manual"
      ],
      "Default": "Auto"
    },
    "RoleARN": {
      "Default": "",
      "Description": "Enter Role ARN that is allowed assume WizOrchestratorRole, leave empty for default",
      "Type": "String"
    }
  },
  "Conditions": {
    "DataScanningEnabled": {
      "Fn::Equals": [
        {
          "Ref": "DataScanning"
        },
        "Enabled"
      ]
    },
    "NetworkConfigurationAuto": {
      "Fn::Equals": [
        {
          "Ref": "NetworkConfiguration"
        },
        "Auto"
      ]
    },
    "Standard": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Partition"
        },
        "aws"
      ]
    },
    "RoleParamIsProvided": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "RoleARN"
            },
            ""
          ]
        }
      ]
    }
  },
  "Outputs": {
    "RoleARNID": {
      "Description": "Orchestrator Role ARN ID",
      "Value": {
        "Fn::GetAtt": [
          "OrchestratorRole",
          "Arn"
        ]
      }
    },
    "Bucket": {
      "Description": "Bucket name",
      "Value": {
        "Ref": "StateBucket"
      }
    },
    "WorkingRegion": {
      "Description": "Working region, that wiz will use to push secrets and write to the state bucket",
      "Value": {
        "Ref": "AWS::Region"
      }
    },
    "ExternalID": {
      "Description": "Your External ID",
      "Value": {
        "Ref": "ExternalId"
      }
    }
  },
  "Resources": {
    "StateBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "aws:kms",
                "KMSMasterKeyID": {
                  "Fn::Sub": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:${StateBucketKeyAlias}"
                }
              },
              "BucketKeyEnabled": true
            }
          ]
        },
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              "wiz-outpost-gitops-state-bucket",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          "2",
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      }
    },
    "StateBucketKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Wiz AWS scanner orchestrator state bucket symmetric KMS key",
        "MultiRegion": true,
        "EnableKeyRotation": true,
        "PendingWindowInDays": 20,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow administration of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "OrchestratorNodePoolRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "OrchestratorRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "OrchestratorNodePoolRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "OrchestratorRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "StateBucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "-",
            [
              "alias/WizOrchestratorStateBucketKey",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          "2",
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "StateBucketKey",
            "Arn"
          ]
        }
      }
    },
    "StateBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "DependsOn": [
        "OrchestratorNodePoolRole",
        "OrchestratorRole"
      ],
      "Properties": {
        "Bucket": {
          "Ref": "StateBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "OrchestratorRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "s3:PutObject",
                "s3:DeleteObject"
              ],
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:s3:::${StateBucket}/*"
              },
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "true"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "OrchestratorNodePoolRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "OrchestratorRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:s3:::${StateBucket}/*"
              },
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "true"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "OrchestratorNodePoolRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "OrchestratorRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": "s3:ListBucket",
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:s3:::${StateBucket}"
              },
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "true"
                }
              }
            },
            {
              "Effect": "Deny",
              "Principal": "*",
              "Action": "*",
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:s3:::${StateBucket}"
              },
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              }
            }
          ]
        }
      }
    },
    "OrchestratorEKSRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "WizOrchestratorEKSRole",
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "eks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "OrchestratorNodePoolRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "WizOrchestratorNodePoolRole",
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          },
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
          },
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "OrchestratorNodePoolPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "OrchestratorNodePoolRole"
      ],
      "Properties": {
        "PolicyName": "WizOrchestratorNodePoolPolicy",
        "Roles": [
          "WizOrchestratorNodePoolRole"
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sts:AssumeRole",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/*WizScannerRole*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:CreateVolume",
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:DescribeVolumes",
                "ec2:DetachVolume",
                "ec2:AttachVolume",
                "kms:ReEncryptFrom",
                "ebs:*",
                "ec2:CreateSnapshot",
                "ec2:DescribeSnapshots",
                "ec2:GetEbsDefaultKmsKeyId",
                "ec2:GetEbsEncryptionByDefault",
                "secretsmanager:ListSecrets"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:DeleteMessage",
                "sqs:DeleteMessageBatch",
                "sqs:ReceiveMessage",
                "sqs:PurgeQueue",
                "sqs:ListQueues",
                "sqs:GetQueueUrl",
                "sqs:ListQueueTags",
                "sqs:ReceiveMessage",
                "sqs:GetQueueAttributes"
              ],
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:sqs:*:*:diskanalyzer-scans*"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:secretsmanager:*:*:secret:wiz/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "ec2:DescribeLaunchTemplateVersions"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DeleteSnapshot",
                "ec2:DeleteVolume"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "ec2:ResourceTag/wiz": "auto-gen-volume"
                }
              }
            }
          ]
        }
      }
    },
    "OrchestratorNodePoolPolicyData": {
      "Condition": "DataScanningEnabled",
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "OrchestratorNodePoolRole"
      ],
      "Properties": {
        "PolicyName": "WizOrchestratorNodePoolPolicyData",
        "Roles": [
          "WizOrchestratorNodePoolRole"
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "rds:DescribeDBClusters",
                "rds:DescribeDBClusterSnapshots",
                "rds:DescribeDBInstances",
                "rds:DescribeDBSnapshots",
                "rds:DescribeDBSubnetGroups",
                "rds:DescribeEvents",
                "rds:ListTagsForResource",
                "rds:AddTagsToResource",
                "rds:CopyDBClusterSnapshot",
                "rds:CopyDBSnapshot",
                "rds:CreateDBCluster",
                "rds:CreateDBInstance",
                "rds:CreateDBSecurityGroup",
                "rds:CreateDBSubnetGroup",
                "rds:DeleteDBCluster",
                "rds:DeleteDBClusterSnapshot",
                "rds:DeleteDBInstance",
                "rds:DeleteDBSnapshot",
                "rds:DeleteDBSubnetGroup",
                "rds:ModifyDBSubnetGroup",
                "rds:ModifyDBCluster",
                "rds:ModifyDBInstance",
                "rds:RestoreDBClusterFromSnapshot",
                "rds:RestoreDBInstanceFromDBSnapshot",
                "rds:DescribeOrderableDBInstanceOptions",
                "rds:CreateDBSubnetGroup",
                "ec2:DescribeAvailabilityZones",
                "redshift:DescribeClusters",
                "redshift:ModifyCluster",
                "redshift:RestoreFromClusterSnapshot",
                "redshift:DeleteCluster"
              ],
              "Resource": "*"
            },
            {
              "Action": "iam:CreateServiceLinkedRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
              },
              "Condition": {
                "StringLike": {
                  "iam:AWSServiceName": "rds.amazonaws.com"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:CreateGrant",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "kms:ViaService": "rds.*.amazonaws.com"
                }
              }
            }
          ]
        }
      }
    },
    "OrchestratorRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "WizOrchestratorRole",
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/job-function/ViewOnlyAccess"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::If": [
                    "RoleParamIsProvided",
                    {
                      "Ref": "RoleARN"
                    },
                    {
                      "Fn::If": [
                        "Standard",
                        "arn:aws:iam::197171649850:root",
                        "arn:aws-us-gov:iam::399027795803:root"
                      ]
                    }
                  ]
                }
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "ExternalId"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "OrchestratorPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "OrchestratorRole"
      ],
      "Properties": {
        "PolicyName": "WizOrchestratorPolicy",
        "Roles": [
          "WizOrchestratorRole"
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/*WizOrchestrator*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "eks:DeleteCluster",
                "eks:DeleteNodegroup"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:eks:*:*:cluster/wiz-orchestrator*"
                },
                {
                  "Fn::Sub": "arn:${AWS::Partition}:eks:*:*:nodegroup/wiz-orchestrator*/*/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:PutSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:DeleteSecret",
                "secretsmanager:UpdateSecret"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:secretsmanager:*:*:secret:wiz/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:SendMessageBatch",
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:PurgeQueue",
                "sqs:DeleteQueue",
                "sqs:ChangeMessageVisibilityBatch",
                "sqs:SetQueueAttributes",
                "sqs:TagQueue",
                "sqs:UntagQueue"
              ],
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:sqs:*:*:diskanalyzer-scans*"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:AttachInstances",
                "autoscaling:CreateAutoScalingGroup",
                "autoscaling:CreateLaunchConfiguration",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:DeleteAutoScalingGroup",
                "autoscaling:DeleteLaunchConfiguration",
                "autoscaling:DeleteTags",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DetachInstances",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:SuspendProcesses",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:DescribeAddresses",
                "ec2:AssociateIamInstanceProfile",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:DescribeDhcpOptions",
                "ec2:CreateLaunchTemplate",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeNatGateways",
                "ec2:CreateRoute",
                "ec2:CreateSecurityGroup",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:DescribeInternetGateways",
                "ec2:DeleteLaunchTemplate",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteRoute",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteTags",
                "ec2:DeleteVolume",
                "ec2:DescribeInstances",
                "ec2:DescribeRouteTables",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVolumes",
                "ec2:DescribeVolumesModifications",
                "ec2:DescribeVpcs",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeAddresses",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "ec2:DetachVolume",
                "ec2:GetLaunchTemplateData",
                "ec2:ModifyLaunchTemplate",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:RunInstances",
                "ec2:DescribeNatGateways",
                "ec2:DescribeNetworkAcls",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeVpcEndpoints",
                "eks:CreateCluster",
                "eks:CreateFargateProfile",
                "eks:CreateNodegroup",
                "eks:DeleteFargateProfile",
                "eks:DescribeCluster",
                "eks:DescribeFargateProfile",
                "eks:DescribeNodegroup",
                "eks:DescribeUpdate",
                "eks:ListClusters",
                "eks:ListFargateProfiles",
                "eks:ListNodegroups",
                "eks:ListTagsForResource",
                "eks:TagResource",
                "eks:UntagResource",
                "eks:UpdateClusterConfig",
                "eks:UpdateClusterVersion",
                "eks:UpdateNodegroupConfig",
                "eks:UpdateNodegroupVersion",
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreateOpenIDConnectProvider",
                "iam:CreateServiceLinkedRole",
                "iam:DeleteInstanceProfile",
                "iam:DeleteOpenIDConnectProvider",
                "iam:GetInstanceProfile",
                "iam:GetOpenIDConnectProvider",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:List*",
                "iam:TagRole",
                "iam:UntagRole",
                "kms:CreateGrant",
                "kms:CreateKey",
                "kms:DescribeKey",
                "kms:EnableKeyRotation",
                "kms:GetKeyPolicy",
                "kms:GetKeyRotationStatus",
                "kms:ListResourceTags",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "sqs:ListQueues",
                "sqs:ListQueueTags",
                "sqs:ListDeadLetterSourceQueues",
                "sqs:CreateQueue",
                "secretsmanager:ListSecrets"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "OrchestratorPolicyAutoNetwork": {
      "Condition": "NetworkConfigurationAuto",
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "OrchestratorRole"
      ],
      "Properties": {
        "PolicyName": "OrchestratorPolicyAutoNetwork",
        "Roles": [
          "WizOrchestratorRole"
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/*WizOrchestrator*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "ec2:Associate*",
                "ec2:Disassociate*",
                "ec2:AllocateAddress",
                "ec2:AssignPrivateIpAddresses",
                "ec2:AttachInternetGateway",
                "ec2:AttachNetworkInterface",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:CreateDefaultSubnet",
                "ec2:CreateDhcpOptions",
                "ec2:CreateEgressOnlyInternetGateway",
                "ec2:CreateInternetGateway",
                "ec2:CreateNatGateway",
                "ec2:CreateNetworkInterface",
                "ec2:CreateRouteTable",
                "ec2:CreateSubnet",
                "ec2:CreateVpc",
                "ec2:DeleteDhcpOptions",
                "ec2:DeleteEgressOnlyInternetGateway",
                "ec2:DeleteInternetGateway",
                "ec2:DeleteNatGateway",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteRouteTable",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteSubnet",
                "ec2:DeleteVpc",
                "ec2:DeleteVpnGateway",
                "ec2:Describe*",
                "ec2:DetachInternetGateway",
                "ec2:DetachNetworkInterface",
                "ec2:ModifySubnetAttribute",
                "ec2:ModifyVpcAttribute",
                "ec2:ReleaseAddress",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
                "ec2:CreateVpcEndpoint",
                "ec2:DeleteVpcEndpoints",
                "ec2:ModifyVpcEndpoint",
                "ec2:DeleteNetworkAclEntry",
                "ec2:CreateNetworkAclEntry"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    }
  }
}
